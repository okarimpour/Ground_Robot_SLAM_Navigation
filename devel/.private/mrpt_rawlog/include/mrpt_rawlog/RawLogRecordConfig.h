//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the mrpt_rawlog package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __mrpt_rawlog__RAWLOGRECORDCONFIG_H__
#define __mrpt_rawlog__RAWLOGRECORDCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace mrpt_rawlog
{
  class RawLogRecordConfigStatics;

  class RawLogRecordConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(RawLogRecordConfig &config, const RawLogRecordConfig &max, const RawLogRecordConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RawLogRecordConfig &config1, const RawLogRecordConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RawLogRecordConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RawLogRecordConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RawLogRecordConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RawLogRecordConfig &config) const = 0;
      virtual void getValue(const RawLogRecordConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T RawLogRecordConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (RawLogRecordConfig::* field);

      virtual void clamp(RawLogRecordConfig &config, const RawLogRecordConfig &max, const RawLogRecordConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RawLogRecordConfig &config1, const RawLogRecordConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RawLogRecordConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RawLogRecordConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RawLogRecordConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RawLogRecordConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RawLogRecordConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RawLogRecordConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RawLogRecordConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<RawLogRecordConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RawLogRecordConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("debug"==(*_i)->name){debug = boost::any_cast<bool>(val);}
        if("motion_noise_type"==(*_i)->name){motion_noise_type = boost::any_cast<int>(val);}
        if("motion_gaussian_alpha_1"==(*_i)->name){motion_gaussian_alpha_1 = boost::any_cast<double>(val);}
        if("motion_gaussian_alpha_2"==(*_i)->name){motion_gaussian_alpha_2 = boost::any_cast<double>(val);}
        if("motion_gaussian_alpha_3"==(*_i)->name){motion_gaussian_alpha_3 = boost::any_cast<double>(val);}
        if("motion_gaussian_alpha_4"==(*_i)->name){motion_gaussian_alpha_4 = boost::any_cast<double>(val);}
        if("motion_gaussian_alpha_xy"==(*_i)->name){motion_gaussian_alpha_xy = boost::any_cast<double>(val);}
        if("motion_gaussian_alpha_phi"==(*_i)->name){motion_gaussian_alpha_phi = boost::any_cast<double>(val);}
        if("bearing_range_std_range"==(*_i)->name){bearing_range_std_range = boost::any_cast<double>(val);}
        if("bearing_range_std_yaw"==(*_i)->name){bearing_range_std_yaw = boost::any_cast<double>(val);}
        if("bearing_range_std_pitch"==(*_i)->name){bearing_range_std_pitch = boost::any_cast<double>(val);}
        if("sensor_frame_sync_threshold"==(*_i)->name){sensor_frame_sync_threshold = boost::any_cast<double>(val);}
      }
    }

    bool debug;
int motion_noise_type;
double motion_gaussian_alpha_1;
double motion_gaussian_alpha_2;
double motion_gaussian_alpha_3;
double motion_gaussian_alpha_4;
double motion_gaussian_alpha_xy;
double motion_gaussian_alpha_phi;
double bearing_range_std_range;
double bearing_range_std_yaw;
double bearing_range_std_pitch;
double sensor_frame_sync_threshold;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool debug;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int motion_noise_type;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_3;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_4;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_xy;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_gaussian_alpha_phi;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double bearing_range_std_range;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double bearing_range_std_yaw;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double bearing_range_std_pitch;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_frame_sync_threshold;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RawLogRecordConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RawLogRecordConfig &__max__ = __getMax__();
      const RawLogRecordConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RawLogRecordConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RawLogRecordConfig &__getDefault__();
    static const RawLogRecordConfig &__getMax__();
    static const RawLogRecordConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const RawLogRecordConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void RawLogRecordConfig::ParamDescription<std::string>::clamp(RawLogRecordConfig &config, const RawLogRecordConfig &max, const RawLogRecordConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class RawLogRecordConfigStatics
  {
    friend class RawLogRecordConfig;

    RawLogRecordConfigStatics()
    {
RawLogRecordConfig::GroupDescription<RawLogRecordConfig::DEFAULT, RawLogRecordConfig> Default("Default", "", 0, 0, true, &RawLogRecordConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.debug = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.debug = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.debug = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<bool>("debug", "bool", 0, "Debug", "", &RawLogRecordConfig::debug)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<bool>("debug", "bool", 0, "Debug", "", &RawLogRecordConfig::debug)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_noise_type = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_noise_type = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_noise_type = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<int>("motion_noise_type", "int", 0, "motion noise", "{'enum_description': 'motion type', 'enum': [{'srcline': 9, 'description': 'gaussian', 'srcfile': '/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'gaussian'}, {'srcline': 9, 'description': 'Thrun', 'srcfile': '/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Thrun'}]}", &RawLogRecordConfig::motion_noise_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<int>("motion_noise_type", "int", 0, "motion noise", "{'enum_description': 'motion type', 'enum': [{'srcline': 9, 'description': 'gaussian', 'srcfile': '/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'gaussian'}, {'srcline': 9, 'description': 'Thrun', 'srcfile': '/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Thrun'}]}", &RawLogRecordConfig::motion_noise_type)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_1 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_1 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_1 = 0.034;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_1", "double", 0, "motion model: alpha_1", "", &RawLogRecordConfig::motion_gaussian_alpha_1)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_1", "double", 0, "motion model: alpha_1", "", &RawLogRecordConfig::motion_gaussian_alpha_1)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_2 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_2 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_2 = 0.057;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_2", "double", 0, "motion model: alpha_2", "", &RawLogRecordConfig::motion_gaussian_alpha_2)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_2", "double", 0, "motion model: alpha_2", "", &RawLogRecordConfig::motion_gaussian_alpha_2)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_3 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_3 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_3 = 0.014;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_3", "double", 0, "motion model: alpha_3", "", &RawLogRecordConfig::motion_gaussian_alpha_3)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_3", "double", 0, "motion model: alpha_3", "", &RawLogRecordConfig::motion_gaussian_alpha_3)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_4 = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_4 = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_4 = 0.097;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_4", "double", 0, "motion model: alpha_4", "", &RawLogRecordConfig::motion_gaussian_alpha_4)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_4", "double", 0, "motion model: alpha_4", "", &RawLogRecordConfig::motion_gaussian_alpha_4)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_xy = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_xy = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_xy = 0.005;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_xy", "double", 0, "motion model: alpha_xy", "", &RawLogRecordConfig::motion_gaussian_alpha_xy)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_xy", "double", 0, "motion model: alpha_xy", "", &RawLogRecordConfig::motion_gaussian_alpha_xy)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_gaussian_alpha_phi = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_gaussian_alpha_phi = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_gaussian_alpha_phi = 0.05;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_phi", "double", 0, "motion model: alpha_phi", "", &RawLogRecordConfig::motion_gaussian_alpha_phi)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("motion_gaussian_alpha_phi", "double", 0, "motion model: alpha_phi", "", &RawLogRecordConfig::motion_gaussian_alpha_phi)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bearing_range_std_range = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bearing_range_std_range = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bearing_range_std_range = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_range", "double", 0, "sensor model: standard deviation of range", "", &RawLogRecordConfig::bearing_range_std_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_range", "double", 0, "sensor model: standard deviation of range", "", &RawLogRecordConfig::bearing_range_std_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bearing_range_std_yaw = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bearing_range_std_yaw = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bearing_range_std_yaw = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_yaw", "double", 0, "sensor model: standard deviation of yaw", "", &RawLogRecordConfig::bearing_range_std_yaw)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_yaw", "double", 0, "sensor model: standard deviation of yaw", "", &RawLogRecordConfig::bearing_range_std_yaw)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bearing_range_std_pitch = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bearing_range_std_pitch = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bearing_range_std_pitch = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_pitch", "double", 0, "sensor model: standard deviation of pitchal", "", &RawLogRecordConfig::bearing_range_std_pitch)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("bearing_range_std_pitch", "double", 0, "sensor model: standard deviation of pitchal", "", &RawLogRecordConfig::bearing_range_std_pitch)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_frame_sync_threshold = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_frame_sync_threshold = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_frame_sync_threshold = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("sensor_frame_sync_threshold", "double", 0, "maximal time difference [sec] to get observations into the same sensor frame", "", &RawLogRecordConfig::sensor_frame_sync_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RawLogRecordConfig::AbstractParamDescriptionConstPtr(new RawLogRecordConfig::ParamDescription<double>("sensor_frame_sync_threshold", "double", 0, "maximal time difference [sec] to get observations into the same sensor frame", "", &RawLogRecordConfig::sensor_frame_sync_threshold)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RawLogRecordConfig::AbstractGroupDescriptionConstPtr(new RawLogRecordConfig::GroupDescription<RawLogRecordConfig::DEFAULT, RawLogRecordConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RawLogRecordConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<RawLogRecordConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RawLogRecordConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RawLogRecordConfig __max__;
    RawLogRecordConfig __min__;
    RawLogRecordConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RawLogRecordConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RawLogRecordConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RawLogRecordConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const RawLogRecordConfig &RawLogRecordConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const RawLogRecordConfig &RawLogRecordConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const RawLogRecordConfig &RawLogRecordConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<RawLogRecordConfig::AbstractParamDescriptionConstPtr> &RawLogRecordConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RawLogRecordConfig::AbstractGroupDescriptionConstPtr> &RawLogRecordConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RawLogRecordConfigStatics *RawLogRecordConfig::__get_statics__()
  {
    const static RawLogRecordConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RawLogRecordConfigStatics::get_instance();

    return statics;
  }

//#line 9 "/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg"
      const int RawLogRecord_gaussian = 0;
//#line 9 "/home/okarimpo/catkin_ws/src/mrpt_navigation/mrpt_rawlog/cfg/RawLogRecord.cfg"
      const int RawLogRecord_Thrun = 1;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __RAWLOGRECORDRECONFIGURATOR_H__
